import { Buffer } from 'node:buffer';
import type { ArtifactKind, ProducedArtefact } from 'tutopanda-core';
import type { ProviderJobContext } from './types.js';

const blobKinds = new Set<ArtifactKind>([
  'SegmentAudio',
  'MusicTrack',
  'SegmentImage',
  'StartImage',
  'SegmentVideo',
  'FinalVideo',
]);

const mimeTypes: Partial<Record<ArtifactKind, string>> = {
  SegmentAudio: 'audio/wav',
  MusicTrack: 'audio/mpeg',
  SegmentImage: 'image/png',
  StartImage: 'image/png',
  SegmentVideo: 'video/mp4',
  FinalVideo: 'video/mp4',
};

export function createMockArtefacts(request: ProviderJobContext): ProducedArtefact[] {
  return request.produces.map((artefactId, index) => {
    const kind = parseArtifactKind(artefactId);
    const diagnostics = {
      producer: request.producer,
      provider: request.provider,
      attempt: request.attempt,
      index,
    };

    if (kind && blobKinds.has(kind)) {
      const mimeType = mimeTypes[kind] ?? 'application/octet-stream';
      const payload = Buffer.from(
        `mock:${request.producer}:${kind}:${request.jobId}:${index}`,
      );
      return {
        artefactId,
        status: 'succeeded',
        blob: { data: payload, mimeType },
        diagnostics,
      };
    }

    return {
      artefactId,
      status: 'succeeded',
      inline: `Mock ${kind ?? 'Artefact'} generated by ${request.producer}`,
      diagnostics,
    };
  });
}

function parseArtifactKind(artefactId: string): ArtifactKind | undefined {
  const match = /^Artifact:([^[]+)/.exec(artefactId);
  if (!match) {
    return undefined;
  }
  return match[1] as ArtifactKind;
}
